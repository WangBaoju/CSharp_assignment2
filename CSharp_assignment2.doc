C#_Assignment2   -----Written by Baoju Wang -----   02/22/2023

1. What are the six combinations of access modifier keywords and what do they do? 
    public : accessible from anywhere
    protected: accessible in the same class or derived class
    internal: accessible in the same assembly
    private : accessible only in current class
    protected internal: accessible within the same assembly and their derived classes.
    private protected: accessible in the same class or any derived classes that are in the same assembly

2.What is the difference between the static, const, and readonly keywords when applied to a type member?
    static: it means that it belongs to the type itself rather than any particular instance of the type. This means that it 
            can be accessed without creating an instance of the type.
    const: it means that it has a value that is determined at compile time and cannot be changed at runtime.
    readonly: it means that it can be assigned a value only in its declaration or in the constructor of the type
            that contains it. Once it is assigned a value, it cannot be changed.
3. What does a constructor do?
    A constructor is a special member function shares the name of the class;
    Constructor is used to create instance of the class
    Constructor is used to initialize the class fields

4. Why is the partial keyword useful?
    The partial keyword allows you to split the definition of a single class,struct, or interface across multiple source files.
    The partial keyword is useful when:
        Organizing large classes or complex code bases;
        Facilitating team development;
        Working with generated code;

5. What is a tuple?
    A tuple is a data structure that allows you to group together multiple values of different types into a single 
        object. Tuple are useful when you need to return multiple values from a method, or when you want to pass
        multiple values as a single argument to a method.

6. What does the C# record keyword do?
    Records are similar to classes or structs, but they provide several additional features that make them well-suited
        for scenarios such as data transfer objects, message payloads, and immutable data models.
    Records are immutable, value-based equality, deconstruction, inheritance, pattern matching.

7. What does overloading and overriding mean?
    Method overriding: methods in the base class and its subclasses share the same method name and same input parameters 
        but different implementations. This is runtime Polymorphism.
    Method overloading: methods in same class share the same method name, but different parameters. This is a kind of 
        compile time polymorphism.

8. What is the difference between a field and a property?
    Field is a variable that belong to an object and stores a value;
    Property is a member that provides a way to read ot write a value of a field.


9. How do you make a method parameter optional?
    In C#, you can make a method parameter optional by providing a default value for the parameter.

10. What is an interface and how is it different from abstract class?
    An interface is a contract that specifies a set of methods, properties, and events that a class 
        must implement. An abstract class is a class that cannot be instantiated on its own, but must
        be subclassed by another class.

    The difference between interfaces and abstract classes:
        1. Implementation: An interface defines a set of methods, properties, and events that a class must 
        implement, while an abstract class can provide an implementation for some of its methods. A class 
        can implement multiple interfaces, but can only inherit from one abstract class.
        2. Instantiation: An interface cannot be instantiated on its own, but must be implemented by a class.
        An abstract class can not be instantiated on its own, but must be subclassed by another class that 
        provides an implementation for its abstract members.
        3. Multiple inheritance: A class can implement multiple interfaces, but can only inherit from one abstract class. 
        4. Accessibility: Members of an interface are always public, while members of an abstract class can be 
        public, protected, or internal.


11. What accessibility level are members of an interface?
    public

12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
    
    True (Overriding)

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
   
    True

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
    
    True

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 

    False. 

16.True/False. Normal (non-abstract) methods can be used in an abstract class.

    True

17. True/False.Derived classes can override methods that were virtual in the base class. 

    True

18. True/False. Derived classes can override methods that were abstract in the base class. 


    True

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.

    False

20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.

    False

21. True/False. A class that implements an interface is allowed to have other members that
arenâ€™t defined in the interface.

    True

22. True/False. A class can have more than one base class.

    False

23. True/False. A class can implement more than one interface.

    True